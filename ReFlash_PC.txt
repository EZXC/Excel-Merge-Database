Sub Reflash_PC()

    Dim BenchMark As Double
    BenchMark = Timer
	Dim ws As Worksheet
	Set ws = ThisWorkbook.Sheets("PC")
    
    With Application
        .Calculation = xlCalculationManual
        .ScreenUpdating = False
        .EnableEvents = False
        .DisplayAlerts = False
    End With
    ws.DisplayPageBreaks = False
    
    Dim currentData As Variant, reportData As Variant, laptopCard As Variant
    
    currentData = GrapOriginalData()
    reportData = GrapReportUpdateData()
    reportData = ReformatDatabase(reportData, 1, 7, 0, 6, 0)
    laptopCard = GrapLaptopCardData()
    
    currentData = ImportDatabase(laptopCard, currentData)
    currentData = ImportDatabase(reportData, currentData)

    ws.Range("A3:H" & UBound(currentData, 1)) = currentData
    
    With Application
        .Calculation = xlCalculationAutomatic
        .ScreenUpdating = True
        .EnableEvents = True
        .DisplayAlerts = True
    End With
	ws.DisplayPageBreaks = True
    
    MsgBox ("Update Completed. Spent " & Timer - BenchMark & " Second")
	
End Sub

Private Function GrapReportUpdateData() As Variant

    Dim reportWorkbook As Workbook
    Dim reportSheet As Worksheet
    Dim reportLastRow As Long
    Dim reportSerialRange As Range
	
    ' Set both workbook & worksheet location
    Set reportWorkbook = Workbooks.Open("O:\EZX\PC\Old\report-50.csv")
    Set reportSheet = reportWorkbook.Sheets(1) 
    
    ' Find the last row based on column A    
    ' Set the range of the data
	With reportSheet
		reportLastRow = .Cells(.Rows.Count, "A").End(x1Up).Row
		Set reportSerialRange = .Range("A2:M" & reportLastRow)
	End With
	
	' Close the report workbook without saving changes
    reportWorkbook.Close SaveChanges:=False
    
    'Return data
    GrapReportUpdateData = reportSerialRange.Value
	
End Function

Private Function GrapOriginalData() As Variant

    Dim currentSheet As Worksheet
    Dim currentLastRow As Long
    Dim currentSerialRange As Range
    
    Set currentSheet = ThisWorkbook.Sheets("PC") 
	With currentSheet
        currentLastRow = .Cells(.Rows.Count, "A").End(xlUp).Row
        Set currentSerialRange = .Range("A3:H" & currentLastRow)
    End With
    
    GrapOriginalData = currentSerialRange.Value
	
End Function

Private Function GrapLaptopCardData() As Variant

    Dim laptopWorkbook As Workbook
    Dim laptopSheet1 As Worksheet, laptopSheet2 As Worksheet
    Dim laptop1LastRow As Long, laptop2LastRow As Long
    Dim laptop1SerialRange As Range, laptop2SerialRange As Range
    Dim laptop1Data() As Variant, laptop2Data() As Variant, laptopData() As Variant
    
    ' Set both workbook & worksheet location
    Set laptopWorkbook = Workbooks.Open("O:\EZX\PC\Old\laptopInfo.xlsx") 
    Set laptopSheet1 = laptopWorkbook.Sheets("USERS") 
    Set laptopSheet2 = laptopWorkbook.Sheets("Loan")
    
    ' Find the last row based on SN column
    laptop1LastRow = laptopSheet1.Cells(laptopSheet1.Rows.Count, "E").End(xlUp).Row
    laptop2LastRow = laptopSheet2.Cells(laptopSheet2.Rows.Count, "H").End(xlUp).Row
    
    Set laptop1SerialRange = laptopSheet1.Range("A2:L" & laptop1LastRow)
    Set laptop2SerialRange = laptopSheet2.Range("A2:K" & laptop2LastRow)
    
    laptop1Data = laptop1SerialRange.Value
    laptop2Data = laptop2SerialRange.Value
    
    laptopWorkbook.Close SaveChanges:=False
    
    laptop1Data = ReformatDatabase(laptop1Data, 12, 4, 7, 5, 11)
    laptop2Data = ReformatDatabase(laptop2Data, 10, 7, 9, 8, 11)
    
    '1=pc name; 4=model; 5=tag; 6=sn; 8=sr
    ReDim laptopData(1 To 1, 1 To UBound(laptop1Data, 2))

    laptopData = ImportDatabase(laptop1Data, laptopData)
    laptopData = ImportDatabase(laptop2Data, laptopData)

    GrapLaptopCardData = laptopData

End Function

Private Function ImportDatabase(OldDatabase As Variant, NewDatabase As Variant) As Variant
    
    Dim oldPCName As String, oldSN As String, oldTag As String, oldSR As String, oldModel As String
    Dim targetIndex As Integer, totalNewData As Integer, newDataIndex As Integer, newDBData As Integer
    Dim i As Integer, j As Integer, k As Integer, l As Integer, m As Integer, mid As Integer
    Dim oldDB As Variant, newDB As Variant, newData As Variant, newDB1 As Variant, newDB2 As Variant

'--------------------------- Sort------------------------------------------------
    oldDB = SortDatabase(OldDatabase)
    newDB = SortDatabase(NewDatabase)
'--------------------------End Sort----------------------------------------------

'--------------------Separate Data into 2 array------------------------------------------
    ReDim newDB1(LBound(newDB, 1) To UBound(newDB, 1) + UBound(oldDB, 1), LBound(newDB, 2) To UBound(newDB, 2))
    ReDim newDB2(LBound(newDB, 1) To UBound(newDB, 1) + UBound(oldDB, 1), LBound(newDB, 2) To UBound(newDB, 2))
    Dim index As Integer
    
    '1=pc name; 4=model; 5=tag; 6=sn; 8=sr
    For k = LBound(newDB, 1) To UBound(newDB, 1)
        If Trim(newDB(k, 6) & "") <> vbNullString Then
            If Not IsNumeric(Left(newDB(k, 6), 1)) Then
                index = Search(newDB2, CStr(newDB(k, 6)))
                If index <> 0 Then
                    For l = LBound(newDB, 2) To UBound(newDB, 2)
                        newDB2(index, l) = newDB(k, l)
                    Next
                Else
                    For l = LBound(newDB, 2) To UBound(newDB, 2)
                        newDB2(k - mid, l) = newDB(k, l)
                    Next
                End If
            Else
                index = Search(newDB1, CStr(newDB(k, 6)))
                If index <> 0 Then
                    For m = LBound(newDB, 2) To UBound(newDB, 2)
                        newDB1(index, m) = newDB(k, m)
                    Next
                Else
                    For m = LBound(newDB, 2) To UBound(newDB, 2)
                        newDB1(k, m) = newDB(k, m)
                    Next
                End If
                mid = k
            End If
        End If
    Next
    
'-----------------End Separate Data into 2 array------------------------------------------

'--------------------Import Data----------------------------------------------------------
    totalNewData = 1
    ReDim newData(totalNewData To totalNewData, LBound(newDB, 2) To UBound(newDB, 2))
    
    For i = LBound(oldDB, 1) To UBound(oldDB, 1)
        oldPCName = oldDB(i, 1)
        oldModel = oldDB(i, 4)
        oldTag = CStr(oldDB(i, 5))
        If oldTag = "Error 2042" Then
            oldTag = ""
        End If
        If IsNumeric(oldDB(i, 6)) Then
            If oldDB(i, 6) <> 0 Then
                oldSN = CStr(Abs(oldDB(i, 6)))
            End If
        Else
            If oldDB(i, 6) <> "??" Or oldDB(i, 6) <> "<none>" Or oldDB(i, 6) <> "<not reported>" Or oldDB(i, 6) <> "-" Then
                oldSN = oldDB(i, 6)
            End If
        End If
        oldSR = oldDB(i, 8)

        If Trim(oldSN & "") <> vbNullString Then 'Not equal Empty/Space
            If IsNumeric(Left(oldSN, 1)) Then
                targetIndex = Search(newDB1, oldSN)
            Else
                targetIndex = Search(newDB2, oldSN)
                If targetIndex <> 0 Then
                    targetIndex = targetIndex + mid
                End If
            End If

            If targetIndex <> 0 Then
                If newDB(targetIndex, 1) <> oldPCName Then
                    newDB(targetIndex, 2) = newDB(targetIndex, 1)
                    newDB(targetIndex, 1) = oldPCName
                End If
                newDB(targetIndex, 4) = oldModel
                newDB(targetIndex, 5) = oldTag
                If Left(oldSR, 2) = "SR" Then
                    newDB(targetIndex, 8) = oldSR
                End If
            Else
                newDataIndex = Search(newData, oldSN)
                If newDataIndex <> 0 Then
                    If newData(newDataIndex, 1) <> oldPCName Then
                        newData(newDataIndex, 2) = newData(newDataIndex, 1)
                        newData(newDataIndex, 1) = oldPCName
                    End If
                    newData(newDataIndex, 4) = oldModel
                    newData(newDataIndex, 5) = oldTag
                    If Left(oldSR, 2) = "SR" Then
                        newData(newDataIndex, 8) = oldSR
                    End If
                Else
                    newData(totalNewData, 1) = oldPCName
                    newData(totalNewData, 4) = oldModel
                    newData(totalNewData, 5) = oldTag
                    newData(totalNewData, 6) = oldSN
                    If Left(oldSR, 2) = "SR" Then
                        newData(totalNewData, 8) = oldSR
                    End If
                    totalNewData = totalNewData + 1
                    newData = ReDimPreserve(newData, totalNewData, UBound(newDB, 2))
                End If
            End If
        End If
        
        Application.StatusBar = "Processed: " & i & " of " & UBound(oldDB, 1) & " / " & Format(i / UBound(oldDB, 1), "Percent")
        DoEvents
        
    Next i
    
    newDBData = UBound(newDB, 1)
    newDB = ReDimPreserve(newDB, UBound(newDB, 1) + UBound(newData, 1), UBound(newDB, 2))
    For j = LBound(newData, 1) To UBound(newData, 1)
        newDB(newDBData + j, 1) = newData(j, 1)
        newDB(newDBData + j, 5) = newData(j, 5)
        newDB(newDBData + j, 6) = newData(j, 6)
        newDB(newDBData + j, 8) = newData(j, 8)
    Next
'--------------------End Import Data-------------------------------------------------------

    ImportDatabase = newDB
    
End Function

Private Function Search(database As Variant, targetSN As String)

    Dim pcSN As String, searchSN As String
    searchSN = targetSN
    
    '1=pc name; 4=model; 5=tag; 6=sn; 8=sr
    Dim i As Long
    For i = LBound(database, 1) To UBound(database, 1)
        pcSN = database(i, 6) 'for easy to read
        If pcSN = searchSN Then
            Search = i
            Exit For
        End If
    Next i

End Function

Private Function ReformatDatabase(sourceDatabase As Variant, pcNameColumn As Integer, computerModel As Integer, tagColumn As Integer, snColumn As Integer, srColumn As Integer)

    ReDim newDB(LBound(sourceDatabase, 1) To UBound(sourceDatabase, 1), 1 To 8) As Variant
 
    Dim i As Integer, j As Integer
    For i = LBound(sourceDatabase, 1) To UBound(sourceDatabase, 1)
        If tag <> 0 Or sr <> 0 Then 'DB = Laptop Info
            newDB(i, 1) = sourceDatabase(i, pcNameColumn)
            newDB(i, 4) = sourceDatabase(i, computerModel)
            newDB(i, 5) = sourceDatabase(i, tagColumn)
            newDB(i, 6) = sourceDatabase(i, snColumn)
            newDB(i, 8) = sourceDatabase(i, srColumn)
        Else 'DB = report 50
            newDB(i, 1) = sourceDatabase(i, pcNameColumn)
            newDB(i, 4) = sourceDatabase(i, computerModel)
            newDB(i, 6) = sourceDatabase(i, snColumn)
        End If
    Next i
    
    ReformatDatabase = newDB

End Function

'redim preserve both dimensions for a multidimension array *ONLY
Public Function ReDimPreserve(aArrayToPreserve As Variant, nNewFirstUBound As Variant, nNewLastUBound As Variant) As Variant
    Dim nFirst As Long
    Dim nLast As Long
    Dim nOldFirstUBound As Long
    Dim nOldLastUBound As Long

    ReDimPreserve = False
    'check if its in array first
    If IsArray(aArrayToPreserve) Then
        'create new array
        ReDim aPreservedArray(1 To nNewFirstUBound, 1 To nNewLastUBound)
        'get old lBound/uBound
        nOldFirstUBound = UBound(aArrayToPreserve, 1)
        nOldLastUBound = UBound(aArrayToPreserve, 2)
        'loop through first
        For nFirst = LBound(aArrayToPreserve, 1) To nNewFirstUBound
            For nLast = LBound(aArrayToPreserve, 2) To nNewLastUBound
                'if its in range, then append to new array the same way
                If nOldFirstUBound >= nFirst And nOldLastUBound >= nLast Then
                    aPreservedArray(nFirst, nLast) = aArrayToPreserve(nFirst, nLast)
                End If
            Next
        Next
        'return the array redimmed
        If IsArray(aPreservedArray) Then ReDimPreserve = aPreservedArray
    End If
End Function

Private Function SortDatabase(database As Variant)

    Dim lastRow As Long
    Dim sortDB As Variant
    Dim wsSort As Worksheet

    Set wsSort = ThisWorkbook.Worksheets.Add
    wsSort.Name = "Sort"
    
    wsSort.Range("A1:H" & UBound(database, 1)) = database
    lastRow = wsSort.Cells(wsSort.Rows.Count, "F").End(xlUp).Row
    wsSort.Sort.SortFields.Clear
    wsSort.Sort.SortFields.Add Key:=Range("F1:F" & lastRow), Order:=xlAscending
    wsSort.Sort.SetRange wsSort.Range("A1:H" & lastRow)
    wsSort.Sort.Header = xlYes
    wsSort.Sort.Apply
    sortDB = wsSort.Range("A1:H" & lastRow)

    wsSort.Delete
    
    SortDatabase = sortDB

End Function








































